import Foundation
import FirebaseFirestore

class DoseRecordManager {
    static let shared = DoseRecordManager()
    private let db = Firestore.firestore()

    private init() {}

    // ‚úÖ Î≥µÏïΩ Í∏∞Î°ù Ï†ÄÏû•
    func saveDoseRecord(userID: String, date: Date, medName: String, taken: Bool, completion: ((Error?) -> Void)? = nil) {
        let data: [String: Any] = [
            "userID": userID,
            "date": Timestamp(date: date),
            "medication": medName,
            "taken": taken
        ]

        db.collection("doseHistory").addDocument(data: data) { error in
            if let error = error {
                print("‚ùå Firestore Ï†ÄÏû• Ïã§Ìå®: \(error.localizedDescription)")
            } else {
                print("‚úÖ Firestore Ï†ÄÏû• ÏÑ±Í≥µ: \(medName) - \(taken ? "Î≥µÏö©Ìï®" : "Î≥µÏö© ÏïàÌï®")")
            }
            completion?(error)
        }
    }

    // ‚úÖ Ï£ºÍ∞Ñ Î≥µÏïΩ Í∏∞Î°ù Ï°∞Ìöå (ÎÇ†ÏßúÎ•º Ï†ïÍ∑úÌôîÌï¥ÏÑú Î∞òÌôò)
    func fetchWeeklyDoseRecords(userID: String, completion: @escaping ([Date: Bool]) -> Void) {
        let calendar = Calendar.current
        let today = Date()
        guard let startOfWeek = calendar.dateInterval(of: .weekOfYear, for: today)?.start else {
            completion([:])
            return
        }

        db.collection("doseHistory")
            .whereField("userID", isEqualTo: userID)
            .whereField("date", isGreaterThanOrEqualTo: Timestamp(date: startOfWeek))
            .getDocuments { snapshot, error in
                var result: [Date: Bool] = [:]

                if let documents = snapshot?.documents {
                    for doc in documents {
                        let data = doc.data()
                        if let timestamp = data["date"] as? Timestamp,
                           let taken = data["taken"] as? Bool {
                            let day = calendar.startOfDay(for: timestamp.dateValue())

                            // ‚ùó Í∏∞Ï°¥Ïóê Ïù¥ÎØ∏ Í∏∞Î°ùÏù¥ ÏûàÏúºÎ©¥ true Ïö∞ÏÑ† Ï≤òÎ¶¨
                            if let existing = result[day] {
                                result[day] = existing || taken
                            } else {
                                result[day] = taken
                            }
                        }
                    }
                } else {
                    print("‚ùå Firestore Í∏∞Î°ù Ï°∞Ìöå Ïã§Ìå®: \(error?.localizedDescription ?? "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò")")
                }

                print("üì• Î∂àÎü¨Ïò® Firestore Î≥µÏïΩ Í∏∞Î°ù Ïàò: \(result.count)")
                completion(result)
            }
    }

    // ‚úÖ Îã®Ïùº ÎÇ†Ïßú Î≥µÏïΩ ÏÑ±Í≥µ Ïó¨Î∂Ä Í≥ÑÏÇ∞ (ÌïÑÏöî Ïãú)
    func wasTaken(on date: Date, in records: [Date: Bool]) -> Bool {
        let day = Calendar.current.startOfDay(for: date)
        return records[day] == true
    }
    
    // ‚úÖ ÌäπÏ†ï ÎÇ†ÏßúÏùò Î≥µÏïΩ Í∏∞Î°ù Ï°∞Ìöå (ÌôàÌôîÎ©¥ ÌçºÏÑºÌä∏ Í≥ÑÏÇ∞Ïö©)
    func fetchRecords(for userID: String, on date: Date, completion: @escaping ([DoseRecord]) -> Void) {
        let calendar = Calendar.current
        let startOfDay = calendar.startOfDay(for: date)
        let endOfDay = calendar.date(byAdding: .day, value: 1, to: startOfDay)!

        db.collection("doseHistory")
            .whereField("userID", isEqualTo: userID)
            .whereField("date", isGreaterThanOrEqualTo: Timestamp(date: startOfDay))
            .whereField("date", isLessThan: Timestamp(date: endOfDay))
            .getDocuments { snapshot, error in
                if let error = error {
                    print("‚ùå Firestore Ïò§Îäò Í∏∞Î°ù Ï°∞Ìöå Ïã§Ìå®: \(error.localizedDescription)")
                    completion([])
                    return
                }

                let records = snapshot?.documents.compactMap { doc -> DoseRecord? in
                    let data = doc.data()
                    guard
                        let name = data["medication"] as? String,
                        let taken = data["taken"] as? Bool,
                        let timestamp = data["date"] as? Timestamp
                    else {
                        return nil
                    }

                    return DoseRecord(
                        id: doc.documentID,
                        medicineName: name,
                        takenTime: timestamp.dateValue(),
                        taken: taken
                    )
                } ?? []

                print("üì¶ Ïò§Îäò Î≥µÏïΩ Í∏∞Î°ù: \(records.count)Í∞ú")
                completion(records)
            }
    }

}
